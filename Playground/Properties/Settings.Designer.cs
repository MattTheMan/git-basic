//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Playground.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "15.5.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Syste" +
            "m.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Windows;\r\nusing System.Wind" +
            "ows.Controls;\r\nusing System.Windows.Data;\r\nusing System.Windows.Documents;\r\nusin" +
            "g System.Windows.Input;\r\nusing System.Windows.Media;\r\nusing System.Windows.Media" +
            ".Imaging;\r\nusing System.Windows.Navigation;\r\nusing System.Windows.Shapes;\r\n//usi" +
            "ng LibGit2Sharp;\r\nusing GitSharp;\r\nusing GitSharp.Commands;\r\n\r\nnamespace Playgro" +
            "und\r\n{\r\n    /// <summary>\r\n    /// Interaction logic for MainWindow.xaml\r\n    //" +
            "/ </summary>\r\n    public partial class MainWindow : Window\r\n    {\r\n        publi" +
            "c MainWindow()\r\n        {\r\n            InitializeComponent();\r\n            Loade" +
            "d += MainWindow_Loaded;\r\n        }\r\n\r\n        private void MainWindow_Loaded(obj" +
            "ect sender, RoutedEventArgs e)\r\n        {\r\n            //TestLibGit2Sharp();\r\n  " +
            "          TestGitSharp();\r\n        }\r\n\r\n        //private void TestLibGit2Sharp(" +
            ")\r\n        //{\r\n        //    using (var repo = new Repository(\"C:\\\\source\\\\git-" +
            "basic\"))\r\n        //    {\r\n        //        var repoDifferences = repo.Diff.Com" +
            "pare<Patch>(new string[] { \"Playground\\\\MainWindow.xaml.cs\" }, true);\r\n        /" +
            "/        DiffViewer.Text = repoDifferences.Content;\r\n        //    }\r\n        //" +
            "}\r\n\r\n        private void TestGitSharp()\r\n        {\r\n            Diff diff = new" +
            " Diff(Properties.Settings.Default.OldString, Properties.Settings.Default.NewStri" +
            "ng);\r\n            foreach (var section in diff.Sections)\r\n            {\r\n\r\n     " +
            "       }\r\n        }        \r\n    }\r\n}\r\n")]
        public string OldString {
            get {
                return ((string)(this["OldString"]));
            }
            set {
                this["OldString"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"using System.Windows;
//using LibGit2Sharp;
using GitSharp;

namespace Playground
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            Loaded += MainWindow_Loaded;
        }

        private void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            //TestLibGit2Sharp();
            TestGitSharp();
        }

        //private void TestLibGit2Sharp()
        //{
        //    using (var repo = new Repository(""C:\\source\\git-basic""))
        //    {
        //        var repoDifferences = repo.Diff.Compare<Patch>(new string[] { ""Playground\\MainWindow.xaml.cs"" }, true);
        //        DiffViewer.Text = repoDifferences.Content;
        //    }
        //}

        private void TestGitSharp()
        {
            Diff diff = new Diff(Properties.Settings.Default.OldString, Properties.Settings.Default.NewString);
            foreach (var section in diff.Sections)
            {
                DiffViewer.Text = section.TextA;                
            }
        }        
    }
}
")]
        public string NewString {
            get {
                return ((string)(this["NewString"]));
            }
            set {
                this["NewString"] = value;
            }
        }
    }
}
